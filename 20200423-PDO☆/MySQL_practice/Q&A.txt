練習題和sql語句
-- 1、查詢"01"課程比"02"課程成績高的學生的信息及課程分數

select a.* ,b.s_score as 01_score,c.s_score as 02_score from

student a

join score b on a.s_id=b.s_id and b.c_id='01'

left join score c on a.s_id=c.s_id and c.c_id='02' or c.c_id = NULL where b.s_score>c.s_score

--也可以這樣寫

select a.*,b.s_score as 01_score,c.s_score as 02_score from student a,score b,score c

where a.s_id=b.s_id

and a.s_id=c.s_id

and b.c_id='01'


 
and c.c_id='02'

and b.s_score>c.s_score

-- 2、查詢"01"課程比"02"課程成績低的學生的信息及課程分數

select a.* ,b.s_score as 01_score,c.s_score as 02_score from

student a left join score b on a.s_id=b.s_id and b.c_id='01' or b.c_id=NULL

join score c on a.s_id=c.s_id and c.c_id='02' where b.s_score<c.s_score

-- 3、查詢平均成績大於等於60分的同學的學生編號和學生姓名和平均成績

select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from

student b


 
join score a on b.s_id = a.s_id

GROUP BY b.s_id,b.s_name HAVING avg_score >=60;

-- 4、查詢平均成績小於60分的同學的學生編號和學生姓名和平均成績

-- (包括有成績的和無成績的)

select b.s_id,b.s_name,ROUND(AVG(a.s_score),2) as avg_score from

student b

left join score a on b.s_id = a.s_id

GROUP BY b.s_id,b.s_name HAVING avg_score <60

union

select a.s_id,a.s_name,0 as avg_score from

student a

where a.s_id not in (

select distinct s_id from score);


 
-- 5、查詢所有同學的學生編號、學生姓名、選課總數、所有課程的總成績

select a.s_id,a.s_name,count(b.c_id) as sum_course,sum(b.s_score) as sum_score from

student a

left join score b on a.s_id=b.s_id

GROUP BY a.s_id,a.s_name;

-- 6、查詢"李"姓老師的數量

select count(t_id) from teacher where t_name like '李%';

-- 7、查詢學過"張三"老師授課的同學的信息

select a.* from

student a

join score b on a.s_id=b.s_id where b.c_id in(

select c_id from course where t_id =(

select t_id from teacher where t_name = '張三'));


 
-- 8、查詢沒學過"張三"老師授課的同學的信息

select * from

student c

where c.s_id not in(

select a.s_id from student a join score b on a.s_id=b.s_id where b.c_id in(

select a.c_id from course a join teacher b on a.t_id = b.t_id where t_name ='張三'));

-- 9、查詢學過編號為"01"並且也學過編號為"02"的課程的同學的信息

select a.* from

student a,score b,score c

where a.s_id = b.s_id and a.s_id = c.s_id and b.c_id='01' and c.c_id='02';

-- 10、查詢學過編號為"01"但是沒有學過編號為"02"的課程的同學的信息


 
select a.* from

student a

where a.s_id in (select s_id from score where c_id='01' ) and a.s_id not in(select s_id from score where c_id='02')

-- 11、查詢沒有學全所有課程的同學的信息

--@wendiepei的寫法

select s.* from student s

left join Score s1 on s1.s_id=s.s_id

group by s.s_id having count(s1.c_id)<(select count(*) from course)

--@k1051785839的寫法

select *

from student

where s_id not in(

select s_id from score t1


 
group by s_id having count(*) =(select count(distinct c_id) from course))

-- 12、查詢至少有一門課與學號為"01"的同學所學相同的同學的信息

select * from student where s_id in(

select distinct a.s_id from score a where a.c_id in(select a.c_id from score a where a.s_id='01')

);

-- 13、查詢和"01"號的同學學習的課程完全相同的其他同學的信息

--@ouyang_1993的寫法

SELECT

Student.*

FROM

Student

WHERE

s_id IN (SELECT s_id FROM Score GROUP BY s_id HAVING COUNT(s_id) = (

#下面的語句是找到'01'同學學習的課程數

SELECT COUNT(c_id) FROM Score WHERE s_id = '01'

)

)

AND s_id NOT IN (

#下面的語句是找到學過『01』同學沒學過的課程，有哪些同學。並排除他們

SELECT s_id FROM Score

WHERE c_id IN(

#下面的語句是找到『01』同學沒學過的課程

SELECT DISTINCT c_id FROM Score

WHERE c_id NOT IN (

#下面的語句是找出『01』同學學習的課程

SELECT c_id FROM Score WHERE s_id = '01'

)

) GROUP BY s_id

) #下面的條件是排除01同學

AND s_id NOT IN ('01')

--@k1051785839的寫法

SELECT

t3.*

FROM

(

SELECT

s_id,

group_concat(c_id ORDER BY c_id) group1

FROM

score

WHERE

s_id <> '01'

GROUP BY

s_id

) t1

INNER JOIN (

SELECT

group_concat(c_id ORDER BY c_id) group2

FROM

score

WHERE

s_id = '01'

GROUP BY

s_id

) t2 ON t1.group1 = t2.group2

INNER JOIN student t3 ON t1.s_id = t3.s_id

-- 14、查詢沒學過"張三"老師講授的任一門課程的學生姓名

select a.s_name from student a where a.s_id not in (

select s_id from score where c_id =

(select c_id from course where t_id =(

select t_id from teacher where t_name = '張三')));

-- 15、查詢兩門及其以上不及格課程的同學的學號，姓名及其平均成績

select a.s_id,a.s_name,ROUND(AVG(b.s_score)) from

student a

left join score b on a.s_id = b.s_id

where a.s_id in(

select s_id from score where s_score<60 GROUP BY s_id having count(1)>=2)

GROUP BY a.s_id,a.s_name

-- 16、檢索"01"課程分數小於60，按分數降序排列的學生信息

select a.*,b.c_id,b.s_score from

student a,score b

where a.s_id = b.s_id and b.c_id='01' and b.s_score<60 ORDER BY b.s_score DESC;

-- 17、按平均成績從高到低顯示所有學生的所有課程的成績以及平均成績

select a.s_id,(select s_score from score where s_id=a.s_id and c_id='01') as 語文,

(select s_score from score where s_id=a.s_id and c_id='02') as 數學,

(select s_score from score where s_id=a.s_id and c_id='03') as 英語,

round(avg(s_score),2) as 平均分 from score a GROUP BY a.s_id ORDER BY 平均分 DESC;

--@喝完這杯還有一箱的寫法

SELECT a.s_id,MAX(CASE a.c_id WHEN '01' THEN a.s_score END ) 語文,

MAX(CASE a.c_id WHEN '02' THEN a.s_score END ) 數學,

MAX(CASE a.c_id WHEN '03' THEN a.s_score END ) 英語,

avg(a.s_score),b.s_name FROM Score a JOIN Student b ON a.s_id=b.s_id GROUP BY a.s_id ORDER BY 5 DESC

-- 18.查詢各科成績最高分、最低分和平均分：以如下形式顯示：課程ID，課程name，最高分，最低分，平均分，及格率，中等率，優良率，優秀率

--及格為>=60，中等為：70-80，優良為：80-90，優秀為：>=90

select a.c_id,b.c_name,MAX(s_score),MIN(s_score),ROUND(AVG(s_score),2),

ROUND(100*(SUM(case when a.s_score>=60 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 及格率,

ROUND(100*(SUM(case when a.s_score>=70 and a.s_score<=80 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 中等率,

ROUND(100*(SUM(case when a.s_score>=80 and a.s_score<=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 優良率,

ROUND(100*(SUM(case when a.s_score>=90 then 1 else 0 end)/SUM(case when a.s_score then 1 else 0 end)),2) as 優秀率

from score a left join course b on a.c_id = b.c_id GROUP BY a.c_id,b.c_name

-- 19、按各科成績進行排序，並顯示排名

-- mysql沒有rank函數

select a.s_id,a.c_id,

@i:=@i +1 as i保留排名,

@k:=(case when @score=a.s_score then @k else @i end) as rank不保留排名,

@score:=a.s_score as score

from (

select s_id,c_id,s_score from score GROUP BY s_id,c_id,s_score ORDER BY s_score DESC

)a,(select @k:=0,@i:=0,@score:=0)s

--@k1051785839的寫法

(select * from (select

t1.c_id,

t1.s_score,

(select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='01') rank

FROM score t1 where t1.c_id='01'

order by t1.s_score desc) t1)

union

(select * from (select

t1.c_id,

t1.s_score,

(select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='02') rank

FROM score t1 where t1.c_id='02'

order by t1.s_score desc) t2)

union

(select * from (select

t1.c_id,

t1.s_score,

(select count(distinct t2.s_score) from score t2 where t2.s_score>=t1.s_score and t2.c_id='03') rank

FROM score t1 where t1.c_id='03'

order by t1.s_score desc) t3)

-- 20、查詢學生的總成績並進行排名

select a.s_id,

@i:=@i+1 as i,

@k:=(case when @score=a.sum_score then @k else @i end) as rank,

@score:=a.sum_score as score

from (select s_id,SUM(s_score) as sum_score from score GROUP BY s_id ORDER BY sum_score DESC)a,

(select @k:=0,@i:=0,@score:=0)s

-- 21、查詢不同老師所教不同課程平均分從高到低顯示

select a.t_id,c.t_name,a.c_id,ROUND(avg(s_score),2) as avg_score from course a

left join score b on a.c_id=b.c_id

left join teacher c on a.t_id=c.t_id

GROUP BY a.c_id,a.t_id,c.t_name ORDER BY avg_score DESC;

-- 22、查詢所有課程的成績第2名到第3名的學生信息及該課程成績

select d.*,c.排名,c.s_score,c.c_id from (

select a.s_id,a.s_score,a.c_id,@i:=@i+1 as 排名 from score a,(select @i:=0)s where a.c_id='01'

ORDER BY a.s_score DESC

)c

left join student d on c.s_id=d.s_id

where 排名 BETWEEN 2 AND 3

UNION

select d.*,c.排名,c.s_score,c.c_id from (

select a.s_id,a.s_score,a.c_id,@j:=@j+1 as 排名 from score a,(select @j:=0)s where a.c_id='02'

ORDER BY a.s_score DESC

)c

left join student d on c.s_id=d.s_id

where 排名 BETWEEN 2 AND 3

UNION

select d.*,c.排名,c.s_score,c.c_id from (

select a.s_id,a.s_score,a.c_id,@k:=@k+1 as 排名 from score a,(select @k:=0)s where a.c_id='03'

ORDER BY a.s_score DESC

)c

left join student d on c.s_id=d.s_id

where 排名 BETWEEN 2 AND 3;

-- 23、統計各科成績各分數段人數：課程編號,課程名稱,[100-85],[85-70],[70-60],[0-60]及所占百分比

select distinct f.c_name,a.c_id,b.`85-100`,b.百分比,c.`70-85`,c.百分比,d.`60-70`,d.百分比,e.`0-60`,e.百分比 from score a

left join (select c_id,SUM(case when s_score >85 and s_score <=100 then 1 else 0 end) as `85-100`,

ROUND(100*(SUM(case when s_score >85 and s_score <=100 then 1 else 0 end)/count(*)),2) as 百分比

from score GROUP BY c_id)b on a.c_id=b.c_id

left join (select c_id,SUM(case when s_score >70 and s_score <=85 then 1 else 0 end) as `70-85`,

ROUND(100*(SUM(case when s_score >70 and s_score <=85 then 1 else 0 end)/count(*)),2) as 百分比

from score GROUP BY c_id)c on a.c_id=c.c_id

left join (select c_id,SUM(case when s_score >60 and s_score <=70 then 1 else 0 end) as `60-70`,

ROUND(100*(SUM(case when s_score >60 and s_score <=70 then 1 else 0 end)/count(*)),2) as 百分比

from score GROUP BY c_id)d on a.c_id=d.c_id

left join (select c_id,SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end) as `0-60`,

ROUND(100*(SUM(case when s_score >=0 and s_score <=60 then 1 else 0 end)/count(*)),2) as 百分比

from score GROUP BY c_id)e on a.c_id=e.c_id

left join course f on a.c_id = f.c_id

-- 24、查詢學生平均成績及其名次

select a.s_id,

@i:=@i+1 as '不保留空缺排名',

@k:=(case when @avg_score=a.avg_s then @k else @i end) as '保留空缺排名',

@avg_score:=avg_s as '平均分'

from (select s_id,ROUND(AVG(s_score),2) as avg_s from score GROUP BY s_id ORDER BY avg_s DESC)a,(select @avg_score:=0,@i:=0,@k:=0)b;

-- 25、查詢各科成績前三名的記錄

-- 1.選出b表比a表成績大的所有組

-- 2.選出比當前id成績大的 小於三個的

select a.s_id,a.c_id,a.s_score from score a

left join score b on a.c_id = b.c_id and a.s_score<b.s_score

group by a.s_id,a.c_id,a.s_score HAVING COUNT(b.s_id)<3

ORDER BY a.c_id,a.s_score DESC

-- 26、查詢每門課程被選修的學生數

select c_id,count(s_id) from score a GROUP BY c_id

-- 27、查詢出只有兩門課程的全部學生的學號和姓名

select s_id,s_name from student where s_id in(

select s_id from score GROUP BY s_id HAVING COUNT(c_id)=2);

-- 28、查詢男生、女生人數

select s_sex,COUNT(s_sex) as 人數 from student GROUP BY s_sex

-- 29、查詢名字中含有"風"字的學生信息

select * from student where s_name like '%風%';

-- 30、查詢同名同性學生名單，並統計同名人數

select a.s_name,a.s_sex,count(*) from student a JOIN

student b on a.s_id !=b.s_id and a.s_name = b.s_name and a.s_sex = b.s_sex

GROUP BY a.s_name,a.s_sex

-- 31、查詢1990年出生的學生名單

select s_name from student where s_birth like '1990%'

-- 32、查詢每門課程的平均成績，結果按平均成績降序排列，平均成績相同時，按課程編號升序排列

select c_id,ROUND(AVG(s_score),2) as avg_score from score GROUP BY c_id ORDER BY avg_score DESC,c_id ASC

-- 33、查詢平均成績大於等於85的所有學生的學號、姓名和平均成績

select a.s_id,b.s_name,ROUND(avg(a.s_score),2) as avg_score from score a

left join student b on a.s_id=b.s_id GROUP BY s_id HAVING avg_score>=85

-- 34、查詢課程名稱為"數學"，且分數低於60的學生姓名和分數

select a.s_name,b.s_score from score b join student a on a.s_id=b.s_id where b.c_id=(

select c_id from course where c_name ='數學') and b.s_score<60

-- 35、查詢所有學生的課程及分數情況；

select a.s_id,a.s_name,

SUM(case c.c_name when '語文' then b.s_score else 0 end) as '語文',

SUM(case c.c_name when '數學' then b.s_score else 0 end) as '數學',

SUM(case c.c_name when '英語' then b.s_score else 0 end) as '英語',

SUM(b.s_score) as '總分'

from student a left join score b on a.s_id = b.s_id

left join course c on b.c_id = c.c_id

GROUP BY a.s_id,a.s_name

-- 36、查詢任何一門課程成績在70分以上的姓名、課程名稱和分數；

select a.s_name,b.c_name,c.s_score from course b left join score c on b.c_id = c.c_id

left join student a on a.s_id=c.s_id where c.s_score>=70

-- 37、查詢不及格的課程

select a.s_id,a.c_id,b.c_name,a.s_score from score a left join course b on a.c_id = b.c_id

where a.s_score<60

--38、查詢課程編號為01且課程成績在80分以上的學生的學號和姓名；

select a.s_id,b.s_name from score a LEFT JOIN student b on a.s_id = b.s_id

where a.c_id = '01' and a.s_score>80

-- 39、求每門課程的學生人數

select count(*) from score GROUP BY c_id;

-- 40、查詢選修"張三"老師所授課程的學生中，成績最高的學生信息及其成績

-- 查詢老師id

select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='張三'

-- 查詢最高分（可能有相同分數）

select MAX(s_score) from score where c_id='02'

-- 查詢信息

select a.*,b.s_score,b.c_id,c.c_name from student a

LEFT JOIN score b on a.s_id = b.s_id

LEFT JOIN course c on b.c_id=c.c_id

where b.c_id =(select c_id from course c,teacher d where c.t_id=d.t_id and d.t_name='張三')

and b.s_score in (select MAX(s_score) from score where c_id='02')

-- 41、查詢不同課程成績相同的學生的學生編號、課程編號、學生成績

select DISTINCT b.s_id,b.c_id,b.s_score from score a,score b where a.c_id != b.c_id and a.s_score = b.s_score

-- 42、查詢每門功成績最好的前兩名

-- 牛逼的寫法

select a.s_id,a.c_id,a.s_score from score a

where (select COUNT(1) from score b where b.c_id=a.c_id and b.s_score>=a.s_score)<=2 ORDER BY a.c_id

-- 43、統計每門課程的學生選修人數（超過5人的課程才統計）。要求輸出課程號和選修人數，查詢結果按人數降序排列，若人數相同，按課程號升序排列

select c_id,count(*) as total from score GROUP BY c_id HAVING total>5 ORDER BY total,c_id ASC

-- 44、檢索至少選修兩門課程的學生學號

select s_id,count(*) as sel from score GROUP BY s_id HAVING sel>=2

-- 45、查詢選修了全部課程的學生信息

select * from student where s_id in(

select s_id from score GROUP BY s_id HAVING count(*)=(select count(*) from course))

--46、查詢各學生的年齡

-- 按照出生日期來算，當前月日 < 出生年月的月日則，年齡減一

select s_birth,(DATE_FORMAT(NOW(),'%Y')-DATE_FORMAT(s_birth,'%Y') -

(case when DATE_FORMAT(NOW(),'%m%d')>DATE_FORMAT(s_birth,'%m%d') then 0 else 1 end)) as age

from student;

-- 47、查詢本周過生日的學生

select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))=WEEK(s_birth)

select * from student where YEARWEEK(s_birth)=YEARWEEK(DATE_FORMAT(NOW(),'%Y%m%d'))

select WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))

-- 48、查詢下周過生日的學生

select * from student where WEEK(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =WEEK(s_birth)

-- 49、查詢本月過生日的學生

select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d')) =MONTH(s_birth)

-- 50、查詢下月過生日的學生

select * from student where MONTH(DATE_FORMAT(NOW(),'%Y%m%d'))+1 =MONTH(s_birth)